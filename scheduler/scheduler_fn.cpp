#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sched.h>
#include <signal.h>
#include <sys/time.h>
#include <time.h>
#include <float.h>
#include <math.h>
#include <iostream>
#include <chrono>
#include "scheduler.hpp"
#include "scheduler_fn.hpp"

#define MEM_LIMIT 19397607424
#define MIN_CHUNK 33554432 // 2MB
#define string(x) #x
#define SIG_SWAPOUT SIGUSR1
#define SIG_SWAPIN SIGUSR2

static size_t mem_current = 0;
static int swap_in_task_pid = -1;

static int scheduler_state = 0;

size_t normal_mem = 0;
size_t vmm_mem = 0;

extern char * cfg_path;
extern int Sync;
using namespace std;

node_t* SortedMerge(node_t* a, node_t* b);
void FrontBackSplit(node_t* source,
                    node_t** frontRef, node_t** backRef);

void MergeSort(node_t** headRef)
{
    node_t* head = *headRef;
    node_t* a;
    node_t* b;
 
    /* Base case -- length 0 or 1 */
    if ((head == NULL) || (head->next == NULL)) {
        return;
    }
 
    /* Split head into 'a' and 'b' sublists */
    FrontBackSplit(head, &a, &b);
 
    /* Recursively sort the sublists */
    MergeSort(&a);
    MergeSort(&b);
 
    /* answer = merge the two sorted lists together */
    *headRef = SortedMerge(a, b);
}
 
node_t* SortedMerge(node_t* a, node_t* b)
{
    node_t* result = NULL;
 
    /* Base cases */
    if (a == NULL)
        return (b);
    else if (b == NULL)
        return (a);
 
    /* Pick either a or b, and recur */
    if (a->deadline <= b->deadline) {
        result = a;
        result->next = SortedMerge(a->next, b);
    }
    else {
        result = b;
        result->next = SortedMerge(a, b->next);
    }
    return (result);
}
 
void FrontBackSplit(node_t* source,
                    node_t** frontRef, node_t** backRef)
{
    node_t* fast;
    node_t* slow;
    slow = source;
    fast = source->next;
 
    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *frontRef = source;
    *backRef = slow->next;
    slow->next = NULL;
}

void del_arg(int argc, char **argv, int index)
{
    int i;
    for(i = index; i < argc-1; ++i) argv[i] = argv[i+1];
    argv[i] = 0;
}

int find_int_arg(int argc, char **argv, char *arg, int def)
{
    int i;
    for(i = 0; i < argc-1; ++i){
        if(!argv[i]) continue;
        if(0==strcmp(argv[i], arg)){
            def = atoi(argv[i+1]);
            del_arg(argc, argv, i);
            del_arg(argc, argv, i);
            break;
        }
    }
    return def;
}

int find_size_t_arg(int argc, char **argv, char *arg, size_t def)
{
    int i;
    for(i = 0; i < argc-1; ++i){
        if(!argv[i]) continue;
        if(0==strcmp(argv[i], arg)){
            sscanf(argv[i+1], "%zu", &def);
            del_arg(argc, argv, i);
            del_arg(argc, argv, i);
            break;
        }
    }
    return def;
}

char *find_char_arg(int argc, char **argv, char *arg, char *def)
{
    int i;
    for(i = 0; i < argc-1; ++i){
        if(!argv[i]) continue;
        if(0==strcmp(argv[i], arg)){
            def = argv[i+1];
            del_arg(argc, argv, i);
            del_arg(argc, argv, i);
            break;
        }
    }
    return def;
}

double what_time_is_it_now()
{
    struct timespec time;
    if (clock_gettime(CLOCK_MONOTONIC, &time) == -1) exit(-1);
    
    return (double)time.tv_sec + (double)time.tv_nsec * 0.000000001;
}

double get_time_point(){
    struct timespec curr;
    clock_gettime(CLOCK_MONOTONIC, &curr);
    double time = curr.tv_sec + curr.tv_nsec/1000000000;
    return time;
}

void set_priority(int priority){
    struct sched_param prior;
    memset(&prior, 0, sizeof(prior));
    prior.sched_priority = priority;
    if(sched_setscheduler(getpid(), SCHED_FIFO, &prior) == -1) perror("SCHED_FIFO :");
}

void set_affinity(int core){
    cpu_set_t mask;
    CPU_ZERO(&mask);
    CPU_SET(core, &mask);
    sched_setaffinity(0, sizeof(mask), &mask);
}

/* DNN List Functions */

#ifdef DEBUG
void print_list(char * name, task_list_t * task_list){
    task_info_t * head = task_list -> head;
    DEBUG_PRINT(BLUE"%s : ", name);
    if (head == NULL) fprintf(stderr, "Nothing registered");
    while( head != NULL){
        fprintf(stderr, "{[%d] %f} ", head->pid, head->period);
        head = head->next;
    }
    fprintf(stderr,"\n"RESET);
}

void print_queue(char * name, queue_t * q){
    node_t * head =  q -> front;
    DEBUG_PRINT(BLUE"[%s]: ", name);
    if (head == NULL) 
        fprintf(stderr, "Empty Queue"); 
  
    while (head != NULL) { 
        fprintf(stderr, "{[%d %f]} ", head->pid, head->deadline);
        head = head->next; 
    }
    fprintf(stderr,"\n"RESET);
}
#else
void print_list(char *name, task_list_t * task_list){
}
void print_queue(char * name, queue_t *q){

}
#endif

task_list_t *create_task_list(){
    task_list_t *tmp = (task_list_t *)malloc(sizeof(task_list_t));
    tmp->count = 0;
    tmp->head = NULL;
    return tmp;
}

void register_task(task_list_t *task_list, task_info_t *task){
    DEBUG_PRINT(BLUE"Task(%d) Registration\n"RESET,task->id);
    if(task_list->head == NULL){
        task_list->head = task;
        task_list->count++;
        print_list("[TaskList]", task_list);
        return;
    }
    task->next = task_list->head;
    task_list->head = task;
    task_list->count++;
    print_list("TaskList", task_list);
    return;
}

void de_register_task(task_list_t *task_list, task_info_t *task){ 
    DEBUG_PRINT(BLUE"Task(%d) De-registration\n"RESET,task->id);
    task_info_t *tmp, *prev;    
    if(task_list->head == task){
        task_list->head = task->next;
        free(task);
        task_list->count--;
        print_list("[TaskList]", task_list);
        return;
    }
    tmp = task_list->head;
    while(tmp != task){
        prev = tmp;
        tmp = tmp->next;
    }
    prev->next = task->next;
    free(task);
    task_list->count--;
    print_list("[TaskList]", task_list);
    return;
} 

/* Resources */

resource_t *create_resource(){
    resource_t *tmp = (resource_t *)malloc(sizeof(resource_t));
    tmp -> state = IDLE;
    tmp -> pid = -1;
    tmp -> waiting = create_queue();
    return tmp;
}

/* Waiting Queue Things */

node_t* new_node(int pid, double deadline){
    node_t *tmp = (node_t *)malloc(sizeof(node_t));
    tmp -> pid = pid;
    tmp -> deadline = deadline;
    tmp -> next = NULL;
    return tmp;
}

queue_t *create_queue(){
    queue_t *q = (queue_t *)malloc(sizeof(queue_t));
    q->front = NULL;
    q->count = 0;
    return q; 
}

int enqueue(char * que_name, queue_t *q, int pid, double deadline){
    //DEBUG_PRINT(BLUE"[%s]: Enqueue Job(%d %f)\n"RESET, que_name, pid, deadline);
    node_t *tmp = new_node(pid, deadline);

    q->count ++;

    if(q->front == NULL){
        q->front = tmp;
        print_queue(que_name, q);
        return -1;
    }

    node_t * iter = q->front;
    if(iter->deadline > tmp->deadline){
        tmp->next = iter;
        q->front = tmp;
    }
    else{
        while(iter->next != NULL && iter->next->deadline < tmp->deadline){
            iter = iter->next;
        }
        while(iter->next !=NULL && iter->next->deadline == tmp->deadline && iter->next->pid > tmp->pid){
            iter = iter->next;
        }
        tmp->next = iter->next;
        iter->next = tmp;
    }
    print_queue(que_name, q);
}

bool exist_current_swap_task(task_list_t * task_list){
    for(task_info_t * task = task_list->head; task != NULL; task = task->next){
        if(task -> state == SWAPIN || task -> state == SWAPOUT){
            return true;    
        } 
    }
    return false;
}

void nodeDelete(queue_t *q, node_t *del){
    node_t *tmp, *prev;

    if(q->front == del){
        q->front = del->next;
        free(del);
        q->count --;
        return;
    }
    tmp = q->front;
    while( tmp != del){
        prev = tmp;
        tmp = tmp->next;
    }
    prev->next = del->next;
    free(del);
    q->count --;
    return;
}

node_t * find_node_by_pid(queue_t *q, int pid){
    node_t * node = q -> front;
    while(node -> pid != pid){
        node = node -> next;
    }
    return node;
}   


int dequeue_asyncswap(char * que_name, queue_t *q, task_list_t *task_list, resource_t *res, resource_t * swap_in){
    if (q -> front == NULL){
        return -1;
    }

    // Forced task schedule due to swap-in operation 
    if(swap_in_task_pid != -1){
        node_t * target = find_node_by_pid(q, swap_in_task_pid);
        int target_pid = target->pid;

        nodeDelete(q, target);
        
        res -> state = BUSY;
        res -> pid = swap_in_task_pid;
        res -> scheduled = what_time_is_it_now();
        return target_pid;
    }

    node_t *target = q->front; 
    task_info_t *target_task = find_task_by_pid(task_list, target->pid); 

    if(target_task->swap_curr != 0  && exist_current_swap_task(task_list)){
        return -1;
    }
   

    if(target_task->swap_curr != 0 && (MEM_LIMIT - mem_current) < target_task->swap_curr){
        size_t should_swap_out = mem_current + target_task->swap_curr - MEM_LIMIT;
        size_t swap_outed = 0;
        while(should_swap_out > swap_outed){
            task_info_t * victim = choose_victim(task_list, target_task);
            if(victim == NULL){
                DEBUG_PRINT(RED"[Error] Victim not exist\n"RESET);
                exit(-1);
            }
            swap_outed += swapout(task_list, victim, (should_swap_out - swap_outed), swap_in);
        }
        return -2;
    }
    
    if(exist_current_swap_task(task_list)){
        target_task -> overlap = 1;
    }
    
    if(target_task->swap_curr != 0){
        swapin(task_list, target_task, swap_in);
        dequeue("SwapIn",swap_in->waiting, swap_in);
    }
    q->front = target->next;

    int target_pid = target->pid;

    res -> state = BUSY;
    res -> pid  = target_pid;  
    res -> scheduled = what_time_is_it_now();
    
    q -> count --;
    free(target);
    return target_pid;

}  


int dequeue(char * que_name, queue_t *q, resource_t *res){
    if (q -> front == NULL){
        return -1;
    }
    
    node_t *target = q->front;
    
    q->front = target->next;

    int target_pid = target->pid;

    res -> state = BUSY;
    res -> pid  = target_pid;  
    res -> scheduled = what_time_is_it_now();
    
    q -> count --;
    free(target);
    print_queue(que_name, q);
    return target_pid;
}  

int dequeue_backward(char * que_name, queue_t *q, resource_t *res){
    if (q -> front == NULL){
        return -1;
    }
    
    node_t *target = q->front;
    node_t *prev = NULL;
    while(target->next != NULL){
        prev = target;
        target = target->next;
    }
    if(prev == NULL){
        q->front = NULL;
    } 
    else{
        prev->next = NULL;
    }
    
    int target_pid = target->pid;

    res -> state = BUSY;
    res -> pid  = target_pid;  
    res -> scheduled = what_time_is_it_now();
    
    q -> count --;
    free(target);
    return target_pid;
}  

void update_deadline(task_info_t *task, double current_time){
    double ms_period = task -> period * 0.001;
    task -> deadline = current_time + ms_period;
}

void send_release_time(task_list_t *task_list, queue_t* waiting_queue, queue_t* swapin_queue){
    struct timespec release_time;
    clock_gettime(CLOCK_MONOTONIC, &release_time);
    double current_time = what_time_is_it_now();
    for(task_info_t * node = task_list -> head ; node != NULL ; node = node -> next){
        update_deadline(node, current_time);
        if(write(node->sch_dec_fd, &release_time.tv_sec, sizeof(release_time.tv_sec)) < 0)
            perror("decision_handler");  
        if(write(node->sch_dec_fd, &release_time.tv_nsec, sizeof(release_time.tv_nsec)) < 0)
            perror("decision_handler");
        node->released_time = current_time;
    }
    
    for(node_t * node = waiting_queue->front; node != NULL; node = node ->next){
        task_info_t * target = find_task_by_pid(task_list, node->pid);
        node->deadline = current_time + target->period * 0.001;
    }
    
    for(node_t * node = swapin_queue->front; node != NULL; node = node -> next){
        task_info_t * target = find_task_by_pid(task_list, node->pid);
        node->deadline = current_time + target->period * 0.001;
    }

    MergeSort(&waiting_queue->front);
    MergeSort(&swapin_queue->front);
}




task_info_t *find_task_by_pid(task_list_t *task_list, int pid){
    task_info_t * node = task_list -> head;
    while(node -> pid != pid){
        node = node -> next;
    }
    return node;
}   

// Register //

void check_registration(task_list_t *task_list, int reg_fd, resource_t *res){
    reg_msg * msg = (reg_msg *)malloc(sizeof(reg_msg));
        
    while(read(reg_fd, msg, sizeof(reg_msg))>0){
        if(msg -> regist == 1) do_register(task_list, msg); 
        else deregister(task_list, msg, res);
    }
}

void do_register(task_list_t *task_list, reg_msg *msg){
    task_info_t *task = (task_info_t *)malloc(sizeof(task_info_t));
    task -> pid = msg -> pid;
    task -> id = task_list->count+1;
    task -> period = (double) msg -> period;
    task -> deadline = task -> period;
    task -> m_entry = new map<int, size_t>();
    task -> scheduled_time = 0;
    task -> released_time = 0;
    task -> state = INIT;
    task -> job_count = 0;
    task -> model_type = msg->model_type;
    task -> swap_max = 0;
    task -> swap_num = -1;
    task -> swap_experince = 0;
    task -> swap_in_ov = 0;
    task -> swap_out_ov = 0;
    task -> overlap = 0;
    task -> current_allocated_swap = 0;


    // This is darknet based profile results, if needed insert your profile results
    //
    // switch(task->model_type){
    //     case 1: /* model type: yolov3 */
    //     {   
    //         task->non_access_num = 583;
    //         int referecne[583] = {1, 3, 6, 7, 10, 11, 13, 15, 17, 19, 22, 23, 26, 27, 29, 31, 33, 35, 38, 39, 42, 43, 45, 47, 49, 51, 54, 55, 58, 59, 61, 63, 67, 69, 72, 73, 76, 77, 79, 81, 83, 85, 88, 89, 92, 93, 95, 97, 99, 101, 104, 105, 108, 109, 111, 113, 117, 119, 122, 123, 126, 127, 129, 131, 133, 135, 138, 139, 142, 143, 145, 147, 151, 153, 156, 157, 160, 161, 163, 165, 167, 169, 172, 173, 176, 177, 179, 181, 183, 185, 188, 189, 192, 193, 195, 197, 201, 203, 206, 207, 210, 211, 213, 215, 217, 219, 222, 223, 226, 227, 229, 231, 235, 237, 240, 241, 244, 245, 247, 249, 251, 253, 256, 257, 260, 261, 263, 265, 269, 271, 274, 275, 278, 279, 281, 283, 285, 287, 290, 291, 294, 295, 297, 299, 303, 305, 308, 309, 312, 313, 315, 317, 319, 321, 324, 325, 328, 329, 331, 333, 337, 339, 342, 343, 346, 347, 349, 351, 353, 355, 358, 359, 362, 363, 365, 367, 371, 373, 376, 377, 380, 381, 383, 385, 387, 389, 392, 393, 396, 397, 399, 401, 405, 407, 410, 411, 414, 415, 417, 419, 421, 423, 426, 427, 430, 431, 433, 435, 439, 441, 444, 445, 448, 449, 451, 453, 455, 457, 460, 461, 464, 465, 467, 469, 471, 473, 476, 477, 480, 481, 483, 485, 489, 491, 494, 495, 498, 499, 501, 503, 505, 507, 510, 511, 514, 515, 517, 519, 523, 525, 528, 529, 532, 533, 535, 537, 539, 541, 544, 545, 548, 549, 551, 553, 557, 559, 562, 563, 566, 567, 569, 571, 573, 575, 578, 579, 582, 583, 585, 587, 591, 593, 596, 597, 600, 601, 603, 605, 607, 609, 612, 613, 616, 617, 619, 621, 625, 627, 630, 631, 634, 635, 637, 639, 641, 643, 646, 647, 650, 651, 653, 655, 659, 661, 664, 665, 668, 669, 671, 673, 675, 677, 680, 681, 684, 685, 687, 689, 693, 695, 698, 699, 702, 703, 705, 707, 709, 711, 714, 715, 718, 719, 721, 723, 727, 729, 732, 733, 736, 737, 739, 741, 743, 745, 748, 749, 752, 753, 755, 757, 759, 761, 764, 765, 768, 769, 771, 773, 777, 779, 782, 783, 786, 787, 789, 791, 793, 795, 798, 799, 802, 803, 805, 807, 811, 813, 816, 817, 820, 821, 823, 825, 827, 829, 832, 833, 836, 837, 839, 841, 845, 847, 850, 851, 854, 855, 857, 859, 861, 863, 866, 867, 870, 871, 873, 875, 879, 881, 884, 885, 888, 889, 891, 893, 895, 897, 900, 901, 904, 905, 907, 909, 911, 913, 916, 917, 920, 921, 923, 925, 927, 929, 932, 933, 936, 937, 939, 941, 943, 945, 948, 949, 952, 953, 955, 957, 959, 961, 964, 965, 968, 969, 971, 973, 975, 977, 985, 987, 990, 991, 994, 995, 997, 999, 1005, 1007, 1010, 1011, 1014, 1015, 1017, 1019, 1021, 1023, 1026, 1027, 1030, 1031, 1033, 1035, 1037, 1039, 1042, 1043, 1046, 1047, 1049, 1051, 1053, 1055, 1058, 1059, 1062, 1063, 1065, 1067, 1069, 1071, 1074, 1075, 1078, 1079, 1081, 1083, 1085, 1087, 1090, 1091, 1094, 1095, 1097, 1099, 1101, 1103, 1111, 1113, 1116, 1117, 1120, 1121, 1123, 1125, 1131, 1133, 1136, 1137, 1140, 1141, 1143, 1145, 1147, 1149, 1152, 1153, 1156, 1157, 1159, 1161, 1163, 1165, 1168, 1169, 1172, 1173, 1175, 1177, 1179, 1181, 1184, 1185, 1188, 1189, 1191, 1193, 1195, 1197, 1200, 1201, 1204, 1205, 1207, 1209, 1211, 1213, 1216, 1217, 1220, 1221, 1223, 1225, 1227, 1229, 1235};
    //         task->non_access_allocations = (int *)malloc(sizeof(int)*583);
    //         for(int i =0; i <583; i++) task->non_access_allocations[i] = referecne[i];
    //         break;
    //     }
    //     case 2: /* model type: densenet */
    //     {
    //         task->non_access_num = 1604;
    //         int reference2[1604] = {};
    //         task->non_access_allocations = (int *)malloc(sizeof(int)*1604);
    //         for(int i =0; i<1604; i++) task->non_access_allocations[i] = reference2[i];
    //         break;
    //     }
    //     case 3: /* model type: resnet */
    //     { 
    //         task->non_access_num = 1212;
    //         int reference3[1212] = {1, 3, 6, 7, 10, 11, 13, 15, 20, 22, 25, 26, 29, 30, 32, 34, 36, 38, 41, 42, 45, 46, 48, 50, 52, 54, 57, 58, 61, 62, 64, 66, 70, 72, 75, 76, 79, 80, 82, 84, 86, 88, 91, 92, 95, 96, 98, 100, 102, 104, 107, 108, 111, 112, 114, 116, 120, 122, 125, 126, 129, 130, 132, 134, 136, 138, 141, 142, 145, 146, 148, 150, 152, 154, 157, 158, 161, 162, 164, 166, 170, 172, 175, 176, 179, 180, 182, 184, 186, 188, 191, 192, 195, 196, 198, 200, 202, 204, 207, 208, 211, 212, 214, 216, 220, 222, 225, 226, 229, 230, 232, 234, 236, 238, 241, 242, 245, 246, 248, 250, 252, 254, 257, 258, 261, 262, 264, 266, 270, 272, 275, 276, 279, 280, 282, 284, 286, 288, 291, 292, 295, 296, 298, 300, 302, 304, 307, 308, 311, 312, 314, 316, 320, 322, 325, 326, 329, 330, 332, 334, 336, 338, 341, 342, 345, 346, 348, 350, 352, 354, 357, 358, 361, 362, 364, 366, 370, 372, 375, 376, 379, 380, 382, 384, 386, 388, 391, 392, 395, 396, 398, 400, 402, 404, 407, 408, 411, 412, 414, 416, 420, 422, 425, 426, 429, 430, 432, 434, 436, 438, 441, 442, 445, 446, 448, 450, 452, 454, 457, 458, 461, 462, 464, 466, 470, 472, 475, 476, 479, 480, 482, 484, 486, 488, 491, 492, 495, 496, 498, 500, 502, 504, 507, 508, 511, 512, 514, 516, 520, 522, 525, 526, 529, 530, 532, 534, 536, 538, 541, 542, 545, 546, 548, 550, 552, 554, 557, 558, 561, 562, 564, 566, 570, 572, 575, 576, 579, 580, 582, 584, 586, 588, 591, 592, 595, 596, 598, 600, 602, 604, 607, 608, 611, 612, 614, 616, 620, 622, 625, 626, 629, 630, 632, 634, 636, 638, 641, 642, 645, 646, 648, 650, 652, 654, 657, 658, 661, 662, 664, 666, 670, 672, 675, 676, 679, 680, 682, 684, 686, 688, 691, 692, 695, 696, 698, 700, 702, 704, 707, 708, 711, 712, 714, 716, 720, 722, 725, 726, 729, 730, 732, 734, 736, 738, 741, 742, 745, 746, 748, 750, 752, 754, 757, 758, 761, 762, 764, 766, 770, 772, 775, 776, 779, 780, 782, 784, 786, 788, 791, 792, 795, 796, 798, 800, 802, 804, 807, 808, 811, 812, 814, 816, 820, 822, 825, 826, 829, 830, 832, 834, 836, 838, 841, 842, 845, 846, 848, 850, 852, 854, 857, 858, 861, 862, 864, 866, 870, 872, 875, 876, 879, 880, 882, 884, 886, 888, 891, 892, 895, 896, 898, 900, 902, 904, 907, 908, 911, 912, 914, 916, 920, 922, 925, 926, 929, 930, 932, 934, 936, 938, 941, 942, 945, 946, 948, 950, 952, 954, 957, 958, 961, 962, 964, 966, 970, 972, 975, 976, 979, 980, 982, 984, 986, 988, 991, 992, 995, 996, 998, 1000, 1002, 1004, 1007, 1008, 1011, 1012, 1014, 1016, 1020, 1022, 1025, 1026, 1029, 1030, 1032, 1034, 1036, 1038, 1041, 1042, 1045, 1046, 1048, 1050, 1052, 1054, 1057, 1058, 1061, 1062, 1064, 1066, 1070, 1072, 1075, 1076, 1079, 1080, 1082, 1084, 1086, 1088, 1091, 1092, 1095, 1096, 1098, 1100, 1102, 1104, 1107, 1108, 1111, 1112, 1114, 1116, 1120, 1122, 1125, 1126, 1129, 1130, 1132, 1134, 1136, 1138, 1141, 1142, 1145, 1146, 1148, 1150, 1152, 1154, 1157, 1158, 1161, 1162, 1164, 1166, 1170, 1172, 1175, 1176, 1179, 1180, 1182, 1184, 1186, 1188, 1191, 1192, 1195, 1196, 1198, 1200, 1202, 1204, 1207, 1208, 1211, 1212, 1214, 1216, 1220, 1222, 1225, 1226, 1229, 1230, 1232, 1234, 1236, 1238, 1241, 1242, 1245, 1246, 1248, 1250, 1252, 1254, 1257, 1258, 1261, 1262, 1264, 1266, 1270, 1272, 1275, 1276, 1279, 1280, 1282, 1284, 1286, 1288, 1291, 1292, 1295, 1296, 1298, 1300, 1302, 1304, 1307, 1308, 1311, 1312, 1314, 1316, 1320, 1322, 1325, 1326, 1329, 1330, 1332, 1334, 1336, 1338, 1341, 1342, 1345, 1346, 1348, 1350, 1352, 1354, 1357, 1358, 1361, 1362, 1364, 1366, 1370, 1372, 1375, 1376, 1379, 1380, 1382, 1384, 1386, 1388, 1391, 1392, 1395, 1396, 1398, 1400, 1402, 1404, 1407, 1408, 1411, 1412, 1414, 1416, 1420, 1422, 1425, 1426, 1429, 1430, 1432, 1434, 1436, 1438, 1441, 1442, 1445, 1446, 1448, 1450, 1452, 1454, 1457, 1458, 1461, 1462, 1464, 1466, 1470, 1472, 1475, 1476, 1479, 1480, 1482, 1484, 1486, 1488, 1491, 1492, 1495, 1496, 1498, 1500, 1502, 1504, 1507, 1508, 1511, 1512, 1514, 1516, 1520, 1522, 1525, 1526, 1529, 1530, 1532, 1534, 1536, 1538, 1541, 1542, 1545, 1546, 1548, 1550, 1552, 1554, 1557, 1558, 1561, 1562, 1564, 1566, 1570, 1572, 1575, 1576, 1579, 1580, 1582, 1584, 1586, 1588, 1591, 1592, 1595, 1596, 1598, 1600, 1602, 1604, 1607, 1608, 1611, 1612, 1614, 1616, 1620, 1622, 1625, 1626, 1629, 1630, 1632, 1634, 1636, 1638, 1641, 1642, 1645, 1646, 1648, 1650, 1652, 1654, 1657, 1658, 1661, 1662, 1664, 1666, 1670, 1672, 1675, 1676, 1679, 1680, 1682, 1684, 1686, 1688, 1691, 1692, 1695, 1696, 1698, 1700, 1702, 1704, 1707, 1708, 1711, 1712, 1714, 1716, 1720, 1722, 1725, 1726, 1729, 1730, 1732, 1734, 1736, 1738, 1741, 1742, 1745, 1746, 1748, 1750, 1752, 1754, 1757, 1758, 1761, 1762, 1764, 1766, 1770, 1772, 1775, 1776, 1779, 1780, 1782, 1784, 1786, 1788, 1791, 1792, 1795, 1796, 1798, 1800, 1802, 1804, 1807, 1808, 1811, 1812, 1814, 1816, 1820, 1822, 1825, 1826, 1829, 1830, 1832, 1834, 1836, 1838, 1841, 1842, 1845, 1846, 1848, 1850, 1852, 1854, 1857, 1858, 1861, 1862, 1864, 1866, 1870, 1872, 1875, 1876, 1879, 1880, 1882, 1884, 1886, 1888, 1891, 1892, 1895, 1896, 1898, 1900, 1902, 1904, 1907, 1908, 1911, 1912, 1914, 1916, 1920, 1922, 1925, 1926, 1929, 1930, 1932, 1934, 1936, 1938, 1941, 1942, 1945, 1946, 1948, 1950, 1952, 1954, 1957, 1958, 1961, 1962, 1964, 1966, 1970, 1972, 1975, 1976, 1979, 1980, 1982, 1984, 1986, 1988, 1991, 1992, 1995, 1996, 1998, 2000, 2002, 2004, 2007, 2008, 2011, 2012, 2014, 2016, 2020, 2022, 2025, 2026, 2029, 2030, 2032, 2034, 2036, 2038, 2041, 2042, 2045, 2046, 2048, 2050, 2052, 2054, 2057, 2058, 2061, 2062, 2064, 2066, 2070, 2072, 2075, 2076, 2079, 2080, 2082, 2084, 2086, 2088, 2091, 2092, 2095, 2096, 2098, 2100, 2102, 2104, 2107, 2108, 2111, 2112, 2114, 2116, 2120, 2122, 2125, 2126, 2129, 2130, 2132, 2134, 2136, 2138, 2141, 2142, 2145, 2146, 2148, 2150, 2152, 2154, 2157, 2158, 2161, 2162, 2164, 2166, 2170, 2172, 2175, 2176, 2179, 2180, 2182, 2184, 2186, 2188, 2191, 2192, 2195, 2196, 2198, 2200, 2202, 2204, 2207, 2208, 2211, 2212, 2214, 2216, 2220, 2222, 2225, 2226, 2229, 2230, 2232, 2234, 2236, 2238, 2241, 2242, 2245, 2246, 2248, 2250, 2252, 2254, 2257, 2258, 2261, 2262, 2264, 2266, 2270, 2272, 2275, 2276, 2279, 2280, 2282, 2284, 2286, 2288, 2291, 2292, 2295, 2296, 2298, 2300, 2302, 2304, 2307, 2308, 2311, 2312, 2314, 2316, 2320, 2322, 2325, 2326, 2329, 2330, 2332, 2334, 2336, 2338, 2341, 2342, 2345, 2346, 2348, 2350, 2352, 2354, 2357, 2358, 2361, 2362, 2364, 2366, 2370, 2372, 2375, 2376, 2379, 2380, 2382, 2384, 2386, 2388, 2391, 2392, 2395, 2396, 2398, 2400, 2402, 2404, 2407, 2408, 2411, 2412, 2414, 2416, 2420, 2422, 2425, 2426, 2429, 2430, 2432, 2434, 2436, 2438, 2441, 2442, 2445, 2446, 2448, 2450, 2452, 2454, 2457, 2458, 2461, 2462, 2464, 2466, 2470, 2472, 2475, 2476, 2479, 2480, 2482, 2484, 2486, 2488, 2491, 2492, 2495, 2496, 2498, 2500, 2502, 2504, 2507, 2508, 2511, 2512, 2514, 2516, 2520, 2522, 2528, 2531};
    //         task->non_access_allocations = (int *)malloc(sizeof(int)*1212);
    //         for(int i = 0; i <1212; i++) task->non_access_allocations[i] = reference3[i];
    //         break;
    //     }
    //     case 4: /* model type: resnext */
    //     {
    //         task->non_access_num = 1212;
    //         int reference4[1212] = {};
    //         task->non_access_allocations = (int *)malloc(sizeof(int)*1212);
    //         for(int i = 0; i <1212; i++) task->non_access_allocations[i] = reference4[i];
    //         break;
    //     }
    // }

    task -> swap_curr = 0;

    DEBUG_PRINT(BLUE"======== REGISTRATION ========\n"RESET);
    DEBUG_PRINT(BLUE"[PID]      %3d\n"RESET, task-> pid);
    DEBUG_PRINT(BLUE"[ID]      %3d\n"RESET, task-> id);
    DEBUG_PRINT(BLUE"[Period]   %3f\n"RESET, task-> period);
    DEBUG_PRINT(BLUE"[Mem]      %10lu\n"RESET, task->mem_size);
    DEBUG_PRINT(BLUE"[Swap max] %10lu\n"RESET, task->swap_max);
    
    char sch_req_fd_name[50];
    char sch_dec_fd_name[50];
    char mm_req_fd_name[50];
    char mm_dec_fd_name[50];

    snprintf(sch_req_fd_name, 50,"/tmp/sch_request_%d",task->pid);
    snprintf(sch_dec_fd_name, 50,"/tmp/sch_decision_%d",task->pid);
    snprintf(mm_req_fd_name, 50,"/tmp/mm_request_%d",task->pid);
    snprintf(mm_dec_fd_name, 50,"/tmp/mm_decision_%d",task->pid);

    task -> sch_req_fd = open_channel(sch_req_fd_name, O_RDONLY);
    task -> sch_dec_fd = open_channel(sch_dec_fd_name, O_WRONLY);
    task -> mm_req_fd = open_channel(mm_req_fd_name, O_RDONLY);
    task -> mm_dec_fd = open_channel(mm_dec_fd_name, O_WRONLY);
    
    register_task(task_list, task);    
    read_cfg(cfg_path, task_list);
    
    size_t swap_volume = task->swap_max;
    write(task->mm_dec_fd, &swap_volume, sizeof(size_t));

    int tid = -1;
    read(task -> mm_req_fd, &tid, sizeof(int));
    if(tid == -1) DEBUG_PRINT(RED " Getting tid wrong\n " RESET);
    task -> tid = tid;
    DEBUG_PRINT(BLUE"[TID]      %3d\n"RESET, task-> tid);
    task -> next = NULL;

    //register_task(task_list, task);    
}


void deregister(task_list_t *task_list, reg_msg *msg, resource_t *res){
    task_info_t *target = find_task_by_pid(task_list, msg -> pid);
    size_t used_memory_size = getmemorysize(*(target->m_entry));
    int pid=target -> pid;
    DEBUG_PRINT(RED"===== DE-REGISTRATION (%d)=====\n"RESET, pid);
    
    close_channels(target);

    de_register_task(task_list, target);
    DEBUG_PRINT(RED"Task(%d) Removed\n"RESET, pid);
    mem_current -= used_memory_size;
    write(target->sch_dec_fd, &pid, sizeof(int));
    
     
    if (res-> pid == pid) res->state = IDLE;
    DEBUG_PRINT(GREEN"Freed memory useage : %f\n"RESET, (float) used_memory_size/giga::num);
    DEBUG_PRINT(GREEN"Current memory useage : %f\n"RESET, (float) mem_current/giga::num );

}

void sch_request_handler(task_list_t *task_list, task_info_t *task, resource_t *res, resource_t *init_que, resource_t *swap_in, resource_t *warmup_que){    
    int ack;
    double current_time = what_time_is_it_now();
    commErrchk(read(task -> sch_req_fd, &ack, sizeof(int)));
    DEBUG_PRINT(RED"[SCH] Task(%d) ack (%d)\n"RESET, task->id, ack);

    if(ack == 99){
        enqueue("init_que", init_que->waiting, task->pid, task->deadline);
        return;
    }
    if(ack == 22){
        enqueue("warmup", warmup_que->waiting, task->pid, task->deadline);
    }

    if(init_que -> state == BUSY && init_que -> pid == task -> pid){
        DEBUG_PRINT(GREEN"Init done(%d)\n"RESET,task->id);
        init_que -> state = IDLE;
        init_que -> pid = -1;
        task -> state = ALIVE;
        swapout(task_list, task, task->swap_max - task->swap_curr, swap_in);
    }

    if(warmup_que -> state == BUSY && warmup_que -> pid == task -> pid){
        DEBUG_PRINT(GREEN"Warmup done(%d)\n"RESET,task->id);
        warmup_que -> state = IDLE;
        warmup_que -> pid = -1; 
        task -> state = ALIVE;
    }

    if(res -> state == BUSY && res -> pid == task->pid){ /* Job termniation */
        DEBUG_PRINT(GREEN"%20s(%d) - %.4f"RESET,"Term Job",task->id, what_time_is_it_now());

        task->state = ALIVE;

#ifdef DEBUG
        fprintf(stderr, RED" / %3.4fms\n"RESET, (what_time_is_it_now() - task->released_time)*1000);  // Job termination (Response Time)
#else   
        if (task->deadline < current_time){
            fprintf(stderr,RED"%d, %3.4f, %3.4f, %d, %3.4f, %3.4f\n"RESET, task->id, (what_time_is_it_now() - task->scheduled_time)*1000, (what_time_is_it_now() - task->released_time)*1000, task->swap_experince, task->swap_out_ov, task->swap_in_ov);
        }
        else{
            fprintf(stderr,"%d, %3.4f, %3.4f,%d, %d, %3.4f, %3.4f\n", task->id, (what_time_is_it_now() - task->scheduled_time)*1000, (what_time_is_it_now() - task->released_time)*1000, task->overlap, task->swap_experince, task->swap_out_ov, task->swap_in_ov);
        }
        task->overlap = 0;
        task->swap_experince = 0;
        task->swap_in_ov = 0;
        task->swap_out_ov = 0;
#endif
        if(task->deadline < current_time){
             DEBUG_PRINT(RED"Job(%d) Miss Deadline (D: %f, Current: %f)\n"RESET,task->id, task->deadline, current_time);
         }
        res -> state = IDLE;
        res -> pid = -1;
        
        if(swap_in->waiting->count != 0 && !exist_current_swap_task(task_list)){
            task_info_t * highest_task = find_task_by_pid(task_list, swap_in->waiting->front->pid);

            if(highest_task->swap_curr > (MEM_LIMIT - mem_current) && task->swap_max != 0){
                swapout_async(task_list, task, highest_task->swap_curr - (MEM_LIMIT - mem_current));
            }
            if(highest_task->swap_curr <= (MEM_LIMIT - mem_current)){
                swapin_async(task_list, highest_task);
                dequeue("SwapIn",swap_in->waiting, swap_in);
            }
        }
        task-> job_count++;
    }
    else{ /* Job release */
        if(ack != 22){
            update_deadline(task, current_time);
            DEBUG_PRINT(GREEN"%20s(%d) - %.4f\n"RESET,"Release Job",task->id, what_time_is_it_now());
            task->released_time = current_time;
            enqueue("GPU", res->waiting, task->pid, task->deadline);
            if(task->swap_curr != 0) enqueue("SwapIn", swap_in->waiting, task->pid, task->deadline);
        }
    }
}

double find_max(double * logs){
    double max = 0;
    for(int i = 0; i < 100; i++){
        if(logs[i] > max) max = logs[i];
    }
    return max;
}

bool exist_currently_running_task(task_list_t * task_list){
    for(task_info_t * task = task_list->head; task != NULL; task = task->next){
        if(task->state == SCHEDULED) {
            return true;
        }
    }
    return false;
}


bool exist_inside(int * arry, int size, int target){
    for(int i = 0; i < size; i ++){
        if(arry[i] == target) return true;
    }
    return false;
}

cudaAPI mm_request_handler(task_list_t * proc_list, task_info_t * proc, resource_t * swap_in){
    req_msg *msg = (req_msg *)malloc(sizeof(req_msg));
    
    commErrchk(read(proc->mm_req_fd, msg, sizeof(req_msg)));    
    if(msg->type == _SO_DONE_){
        DEBUG_PRINT(GREEN"%20s(%d) - %.4f\n"RESET,"Swap-out Done",proc->id, what_time_is_it_now());
        
        proc->state = ALIVE;
        proc->swap_curr += msg->size; 
        mem_current -= msg->size;
        
        DEBUG_PRINT(RED"Mem Current: %10lu, Left: %10lu\n"RESET, mem_current, MEM_LIMIT - mem_current);

        if(scheduler_state == 1){
            proc->swap_experince = 1;
            proc->swap_out_ov = (what_time_is_it_now() - proc->swap_time)*1000;

            if(exist_currently_running_task(proc_list)){
                task_info_t * highest_task = find_task_by_pid(proc_list, swap_in->waiting->front->pid);
                if(highest_task->swap_curr > (MEM_LIMIT - mem_current)){
                    task_info_t * victim = choose_victim(proc_list, proc);
                    swapout_async(proc_list, victim, highest_task->swap_curr - (MEM_LIMIT - mem_current));
                }else{
                    swapin_async(proc_list, highest_task);
                    dequeue("SwapIn",swap_in->waiting, swap_in);
                }
            }
        }
        return _SO_DONE_;
    }

    if(msg->type == _SI_DONE_){
        proc->state = ALIVE;
        proc->swap_curr -= msg->size; 
        mem_current += msg->size;
        swap_in_task_pid = proc->pid;

        DEBUG_PRINT(GREEN"%20s(%d) - %.4f"RESET,"Swap-in Done\n", proc->id, what_time_is_it_now());
        DEBUG_PRINT(RED"Mem Current: %10lu, Left: %10lu\n"RESET, mem_current, MEM_LIMIT - mem_current);
        proc->swap_experince = 1;
        proc->swap_in_ov = (what_time_is_it_now() - proc->swap_time)*1000;
        return _SI_DONE_;
    }

    if(msg->type == _cudaMalloc_){
        int malloc_type = 0;
        int requested_idx = msg->entry_index;
        size_t updated_mem_state = mem_current;
        
        if(exist_inside(proc->swap_allocations, proc->swap_num, requested_idx)){
            int before_chunk_num = int((proc->current_allocated_swap + MIN_CHUNK -1)/MIN_CHUNK);
            int after_chunk_num = int((proc->current_allocated_swap+msg->size + MIN_CHUNK -1)/MIN_CHUNK);
            
            updated_mem_state = mem_current + (after_chunk_num - before_chunk_num)*MIN_CHUNK;
            proc->current_allocated_swap += msg->size;

            malloc_type = 1;

            vmm_mem += (after_chunk_num - before_chunk_num)*MIN_CHUNK;

        }else{
            if(exist_inside(proc->non_access_allocations, proc->non_access_num, requested_idx)){
                malloc_type = -1;
            }else{
                updated_mem_state += msg->size;
                normal_mem += msg->size;
            }
        }

        if(updated_mem_state > MEM_LIMIT){
            DEBUG_PRINT(RED"Memory FULL!\n"RESET);
            size_t should_swap_out = updated_mem_state - MEM_LIMIT;
            size_t swap_outed = 0;
            while(should_swap_out > swap_outed){
                task_info_t * victim = choose_victim(proc_list, proc);
                if(victim == NULL){
                    DEBUG_PRINT(RED"[Error] Victim not exist\n"RESET);
                    exit(-1);
                }
                swap_outed += swapout(proc_list, victim, (should_swap_out - swap_outed), swap_in);
            }
        }

        commErrchk(write(proc->mm_dec_fd, &malloc_type, sizeof(int)));
    
        mem_current = updated_mem_state;

        if(malloc_type != -1) proc->m_entry->insert(make_pair(msg->entry_index, msg->size));

        return msg->type;
    }

    if(msg->type == _cudaFree_){
    
        mem_current -= proc->m_entry->at(msg->entry_index);
        proc->m_entry->erase(msg->entry_index);
        int ack = 1;
        commErrchk(write(proc->mm_dec_fd, &ack, sizeof(int)));
    }
}

task_info_t* choose_victim(task_list_t* proc_list, task_info_t* proc){
    task_info_t * victim;
    if(proc_list->count == 1) return NULL;

    double latest_proc_scheduled_time = -1;
    int latest_proc_pid = -1;

    for(task_info_t* tmp = proc_list->head; tmp != NULL; tmp = tmp->next){
        if(tmp->scheduled_time >= latest_proc_scheduled_time && (getmemorysize(*(tmp->m_entry))!=0) && tmp != proc && tmp->swap_curr < tmp->swap_max){
            latest_proc_scheduled_time = tmp->scheduled_time;
            latest_proc_pid = tmp->pid;
        }
    }
    
    if (latest_proc_pid == -1) return NULL;

    victim = find_task_by_pid(proc_list, latest_proc_pid);
    return victim;
}

size_t getmemorysize(map<int,size_t> entry){
    size_t total_size = 0;
    for(auto iter = entry.begin(); iter != entry.end(); iter++){
        total_size += iter->second;
    }
    return total_size;
}

void init_decision_handler(int target_pid, task_list_t *task_list){

    int ack = 0;
    task_info_t *target = find_task_by_pid(task_list, target_pid);
    
    DEBUG_PRINT(GREEN"Init Scheduled Job(%d)\n"RESET,target->id);    
    commErrchk(write(target->sch_dec_fd,&ack,sizeof(int)));
}

void decision_handler(int target_pid, task_list_t *task_list){

    int ack = 0;
    task_info_t *target = find_task_by_pid(task_list, target_pid);

    sch_msg * msg = (sch_msg *)malloc(sizeof(sch_msg));
    msg->pid = target_pid;
    
    if (target_pid == swap_in_task_pid) swap_in_task_pid = -1;

    target->state = SCHEDULED;
    DEBUG_PRINT(GREEN"%20s(%d) - %.4f\n"RESET,"Scheduled Job",target->id, what_time_is_it_now());
    target->scheduled_time = what_time_is_it_now();
    commErrchk(write(target->sch_dec_fd, &ack, sizeof(int)));
}

size_t swapin(task_list_t* proc_list, task_info_t* proc, resource_t * swap_in){
    
    DEBUG_PRINT(BLUE "[SWAP IN] Target: %d, Size: %10lu\n"RESET, proc->id, proc->swap_max);
    kill(proc->tid, SIG_SWAPIN);
    proc->state = SWAPIN;
    proc->swap_time = what_time_is_it_now();
    cudaAPI ret;
    do{
        ret = mm_request_handler(proc_list, proc, swap_in);
    }while(ret != _SI_DONE_);

    return 1;
}

size_t swapin_async(task_list_t* proc_list, task_info_t* proc){
    
    DEBUG_PRINT(BLUE "[SWAP IN Async] Target: %d, Size: %10lu\n"RESET, proc->id, proc->swap_max);

    kill(proc->tid, SIG_SWAPIN);
    proc->state = SWAPIN;
    proc->swap_time = what_time_is_it_now();
    
    return 1;
}

size_t swapout(task_list_t* proc_list, task_info_t* proc, size_t size, resource_t *swap_in){
    size_t evict_size = 0;
    size_t remaining_size = proc->swap_max - proc->swap_curr;
    
    size = int((size + MIN_CHUNK -1)/MIN_CHUNK) * MIN_CHUNK;

    DEBUG_PRINT(BLUE "[SWAP OUT] Target: %d, Size: %10lu\n"RESET, proc->id, size);
    DEBUG_PRINT(BLUE "[SWAP OUT] Mem Current: %10lu, Left: %10lu\n"RESET, mem_current, MEM_LIMIT - mem_current);
    if(remaining_size > size){
        evict_size = size;
    } 
    else{
        evict_size = remaining_size;    
    } 
    commErrchk(write(proc->mm_dec_fd, &evict_size, sizeof(size_t)));

    kill(proc->tid, SIG_SWAPOUT);
    proc->state = SWAPOUT;
    proc->swap_time = what_time_is_it_now();

    cudaAPI ret;
    do{
        ret = mm_request_handler(proc_list, proc, swap_in);
    }while(ret != _SO_DONE_);

    return evict_size;
}

size_t swapout_async(task_list_t* proc_list, task_info_t* proc, size_t size){
    size_t evict_size = 0;
    size_t remaining_size = proc->swap_max - proc->swap_curr;

    size = int((size + MIN_CHUNK -1)/MIN_CHUNK) * MIN_CHUNK;


    DEBUG_PRINT(BLUE "[SWAP OUT Async] Target: %d, Size: %10lu\n"RESET, proc->id, size);
    DEBUG_PRINT(BLUE "[SWAP OUT] Mem Current: %10lu, Left: %10lu\n"RESET, mem_current, MEM_LIMIT - mem_current);
    
    if(remaining_size > size) evict_size = size;
    else evict_size = remaining_size;    

    commErrchk(write(proc->mm_dec_fd, &evict_size, sizeof(size_t)));

    kill(proc->tid, SIG_SWAPOUT);
    proc->state = SWAPOUT;
    proc->swap_time = what_time_is_it_now();

    return evict_size;  
}

void init_memory_setting(queue_t * waiting, task_list_t * task_list, resource_t * swap_in){
    scheduler_state = 1;
    // increasing order of swapped amount (front: no swap, ---)
    DEBUG_PRINT(RED"==Init memory setting==\n"RESET);
    for(node_t *tmp = waiting->front; tmp != NULL; tmp = tmp->next){
        task_info_t *task = find_task_by_pid(task_list, tmp->pid);
        DEBUG_PRINT(RED"Task(%d) Curr: %lu, Max: %lu\n"RESET, task->id, task->swap_curr, task->swap_max);
        if(task->swap_curr < task->swap_max) {
            swapout(task_list, task, (task->swap_max - task->swap_curr), swap_in);
        }else{
            DEBUG_PRINT(RED"PASS\n"RESET);
        }
        DEBUG_PRINT(RED"Task(%d) Curr: %lu, Max: %lu\n"RESET, task->id, task->swap_curr, task->swap_max);
    }
    for(node_t *tmp = waiting->front; tmp != NULL; tmp = tmp->next){
        task_info_t *task = find_task_by_pid(task_list, tmp->pid);
        DEBUG_PRINT(RED"Task(%d) Curr: %lu, Max: %lu\n"RESET, task->id, task->swap_curr, task->swap_max);
        if(task->swap_curr > task->swap_max) swapin(task_list, task, swap_in);
        DEBUG_PRINT(RED"Task(%d) Curr: %lu, Max: %lu\n"RESET, task->id, task->swap_curr, task->swap_max);
        if(task->swap_curr != 0) enqueue("SwapIn", swap_in->waiting, task->pid, task->deadline);
    }
    swap_in_task_pid = -1;
    DEBUG_PRINT(RED"Current Mem: %10lu, Left: %10lu\n"RESET, mem_current, MEM_LIMIT-mem_current);
    DEBUG_PRINT(RED"==Init memory setting Done==\n"RESET);
}


///// communication ////

int open_channel(char *pipe_name,int mode){
    int pipe_fd;
    
    if( access(pipe_name, F_OK) != -1)
        remove(pipe_name);

    if( mkfifo(pipe_name, 0666) == -1){
        DEBUG_PRINT(RED"[ERROR]Fail to make pipe"RESET);
        exit(-1);
    }
    if( (pipe_fd = open(pipe_name, mode)) < 0){
        DEBUG_PRINT(RED"[ERROR]Fail to open channel for %s\n"RESET, pipe_name);
        exit(-1);
    }
   DEBUG_PRINT(BLUE"Channel for %s has been successfully openned!\n"RESET, pipe_name);
   
   return pipe_fd;
}

void close_channel(char * pipe_name){
    if ( unlink(pipe_name) == -1){
        DEBUG_PRINT(RED"[ERROR]Fail to remove %s\n"RESET,pipe_name);
        exit(-1);
    }
}

void close_channels(task_info_t * task){
    DEBUG_PRINT(RED"Channel closed - (%d)\n"RESET,task->pid);
    char sch_req_fd_name[50];
    char sch_dec_fd_name[50];
    char mm_req_fd_name[50];
    char mm_dec_fd_name[50];

    snprintf(sch_req_fd_name, 50,"/tmp/sch_request_%d",task->pid);
    snprintf(sch_dec_fd_name, 50,"/tmp/sch_decision_%d",task->pid);
    snprintf(mm_req_fd_name, 50,"/tmp/mm_request_%d",task->pid);
    snprintf(mm_dec_fd_name, 50,"/tmp/mm_decision_%d",task->pid);
    
    close_channel(sch_req_fd_name);
    close_channel(sch_dec_fd_name);
    close_channel(mm_req_fd_name);
    close_channel(mm_dec_fd_name);
}

int make_fdset(fd_set *readfds, int reg_fd, task_list_t *task_list){
    int fd_head = 0;
    // initialize fd_set;
    FD_ZERO(readfds);

    // set register_fd
    FD_SET(reg_fd, readfds);
    if(reg_fd > fd_head) fd_head = reg_fd;
    // if there exist registered task, set
    if(task_list -> count > 0){
        task_info_t *node = task_list -> head;
        while(node != NULL){
            FD_SET(node -> sch_req_fd, readfds);
            FD_SET(node -> mm_req_fd, readfds);
            if(node -> sch_req_fd > fd_head) fd_head = node -> sch_req_fd;
            if(node -> mm_req_fd > fd_head) fd_head = node -> mm_req_fd;
            node = node -> next;
        }
    }
    return fd_head;
}

char * getcudaAPIString(cudaAPI type){
    switch (type){
        case _cudaMalloc_:
            return string(_cudaMalloc_);
        case _cudaFree_:
            return string(_cudaFree_);
        case _SO_DONE_:
            return string(_SO_DONE_);
        case _SI_DONE_:
            return string(_SI_DONE_);
        case _SWAPIN_:
            return string(_SWAPIN_);
    }
}


void printShortTasksetInfo(task_list_t * task_list){
    /*Printing format*/
    // id, model_type, period, mem_limit
    fprintf(stderr,"id, model_type, period, mem_limit\n");
    for(task_info_t *tmp = task_list->head; tmp != NULL; tmp= tmp->next){
        fprintf(stderr,"%d, %d, %.0f, %lu\n", tmp->id, tmp->model_type, tmp->period, tmp->swap_max);
    }
    fprintf(stderr,"id, release_time, schedule_time, execution_time, response_time, overlap, swap_experince, swap_out_ov, swap_in_ov\n");
}


void read_cfg(char * path, task_list_t *task_list){
    FILE * fp;
    fp = fopen(path, "r");
    int task_num = Sync;

    for(int i = 0; i < task_num; i++){
        int model_type;
        int period;
        int swap_num;
        size_t mem_limit;
        fscanf(fp,"%d, %d, %lu, %d,",&model_type, &period, &mem_limit,&swap_num);
        fprintf(stderr,"%d, %d, %lu, %d\n", model_type, period, mem_limit, swap_num);
        if(swap_num){
            task_info_t * task;
            for(task = task_list->head; task != NULL; task = task->next){
                if(task->model_type == model_type && task->period == (double)period && task->swap_num == -1){
                    task->swap_num = swap_num;
                    task->swap_max = mem_limit;
                    task->swap_allocations = (int *)malloc(sizeof(int)*swap_num);
                    for(int j = 0; j < swap_num-1; j++){
                        fscanf(fp, "%d,", &(task->swap_allocations[j]));
                    }
                    fscanf(fp,"%d\n",&(task->swap_allocations[swap_num-1]));
                    break;
                }
            }
        }
    }

    fclose(fp);
    DEBUG_PRINT(GREEN"Configuration uploaded...\n"RESET);
}
